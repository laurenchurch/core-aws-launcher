{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description":"EKS Cluster main template",

  "Mappings": {
    "NodeImageId": {
      "us-east-1": {
        "dev": "ami-0440e4f6b9713faf6"
      },
      "us-west-2": {
        "dev": "ami-0a54c984b9f908c81"
      }

    }
  },

  "Parameters": {
    "KeyName": {
      "Description": "The EC2 Key Pair to allow SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "home"
    },

    "EKSRoleArn": {
      "Description": "EKSRoleArn",
      "Type": "String"      
    },

    "NodeInstanceType": {
      "Description": "EC2 instance type for the node instances",
      "Type": "String",
      "Default": "m4.4xlarge",
      "AllowedValues": [
        "t2.small",
        "t2.medium",
        "t2.large",
        "t2.xlarge",
        "t2.2xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m5.large",
        "m5.xlarge",
        "m5.2xlarge",
        "m5.4xlarge",
        "m5.12xlarge",
        "m5.24xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c5.large",
        "c5.xlarge",
        "c5.2xlarge",
        "c5.4xlarge",
        "c5.9xlarge",
        "c5.18xlarge",
        "i3.large",
        "i3.xlarge",
        "i3.2xlarge",
        "i3.4xlarge",
        "i3.8xlarge",
        "i3.16xlarge",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "r4.large",
        "r4.xlarge",
        "r4.2xlarge",
        "r4.4xlarge",
        "r4.8xlarge",
        "r4.16xlarge",
        "x1.16xlarge",
        "x1.32xlarge",
        "p2.xlarge",
        "p2.8xlarge",
        "p2.16xlarge",
        "p3.2xlarge",
        "p3.8xlarge",
        "p3.16xlarge"
      ],
      "ConstraintDescription": "Must be a valid EC2 instance type"
    },
    "NodeAutoScalingGroupMinSize": {
      "Type": "Number",
      "Description": "Minimum size of Node Group ASG.",
      "Default": 1
    },
    "NodeAutoScalingGroupMaxSize": {
      "Type": "Number",
      "Description": "Maximum size of Node Group ASG.",
      "Default": 2
    },
    "NodeVolumeSize": {
      "Type": "Number",
      "Description": "Node volume size",
      "Default": 64
    },
    "ClusterName": {
      "Description": "The cluster name provided when the cluster was created. If it is incorrect, nodes will not be able to join the cluster.",
      "Type": "String",
      "MinLength":5
    },
    "BootstrapArguments": {
      "Description": "Arguments to pass to the bootstrap script. See https://github.com/cloudbees/core-aws-launcher/tree/master/scripts/bootstrap.sh",
      "Default": "",
      "Type": "String"
    },
    "NodeGroupName": {
      "Description": "Unique identifier for the Node Group.",
      "Type": "String",
      "Default": "Ec2EksNodeGroup"
    }
  },




  "Resources": {
    "vpcStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": "https://s3.amazonaws.com/core-aws-launcher/create-eks-vpc.yaml",
        "TimeoutInMinutes": "60"
      }
    },

    "SSHSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DependsOn": "vpcStack",
      "Properties": {
        "VpcId": {
          "Fn::GetAtt": ["vpcStack", "Outputs.VpcId"]
        },
        "GroupDescription": "Enable SSH access via port 22",
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": "0.0.0.0/0"
        }]
      }
    },

    "SSHNI": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {

        "SubnetId": {
          "Fn::GetAtt": ["vpcStack", "Outputs.SubnetId01"]
        },

        "Description": "Interface for control traffic such as SSH",
        "GroupSet": [{
          "Ref": "SSHSecurityGroup"
        }],
        "SourceDestCheck": "true",
        "Tags": [{
          "Key": "Network",
          "Value": "Control"
        }]
      }
    },


    "ControlNodeRole": {
         "Type": "AWS::IAM::Role",
         "Properties": {
            "AssumeRolePolicyDocument": {
               "Statement": [{
                  "Effect": "Allow",
                  "Principal": {
                     "Service": ["ec2.amazonaws.com"]
                  },
                  "Action": ["sts:AssumeRole"]
               }]
            },
            "Path": "/"
         }
      },

      "ControlNodeInstanceProfile": {
         "Type": "AWS::IAM::InstanceProfile",
         "Properties": {
            "Path": "/",
            "Roles": [{ "Ref": "ControlNodeRole" }]
         }
      },

      "ControlNodeRolePolicies": {
         "Type": "AWS::IAM::Policy",
         "Properties": {
            "PolicyName": "ControlNode",
            "PolicyDocument": {
               "Statement": [{
                  "Effect": "Allow",
                  "Action": "*",
                  "Resource": "*"
               }]
            },
            "Roles": [{ "Ref": "ControlNodeRole" }]
         }
      },


    "IAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": ["ec2.amazonaws.com"]
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "ManagedPolicyArns": [
         "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
        ],
        "Path": "/"
      }
    },

    "IAMInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [{
          "Ref": "IAMRole"
        }]
      }
    },

    "IAMRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "IAM",
        "PolicyDocument": {
          "Statement": [{
            "Effect": "Allow",
            "Action": ["ec2:*","cloudformation:*","iam:*"],
            "Resource": "*"
          }]
        },
        "Roles": [{
          "Ref": "IAMRole"
        }]
      }
    },


    "ControlPortAddress": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "AssociateControlPort": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": ["ControlPortAddress", "AllocationId"]
        },
        "NetworkInterfaceId": {
          "Ref": "SSHNI"
        }
      }
    },

    "Ec2Instance": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": "vpcStack",

      "Properties": {
        "InstanceType": {
          "Ref": "NodeInstanceType"
        },

        "IamInstanceProfile": {
          "Ref": "ControlNodeInstanceProfile"
        },

        "ImageId": {
          "Fn::FindInMap": ["NodeImageId", {
            "Ref": "AWS::Region"
          }, "dev"]
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "NetworkInterfaces": [{
          "NetworkInterfaceId": {
            "Ref": "SSHNI"
          },
          "DeviceIndex": "0"
        }],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": ["", [
              "#!/bin/bash -ex", "\n",
              "mkdir -p /home/ec2-user/bin", "\n",
              "wget https://s3.amazonaws.com/core-aws-launcher/bootstrap.sh --output-document=/home/ec2-user/bin/bootstrap.sh", "\n",

              "/bin/sh -x /home/ec2-user/bin/bootstrap.sh ",
              " -c ", {
                "Ref": "ClusterName"
              },
              " -r ", {
                "Ref": "EKSRoleArn"
              },
              " -n ", {
                "Ref": "AWS::StackName"
              },
              "\n",
              "\n"
            ]]
          }
        }
      }
    }

  },


  "Outputs": {
    "StackRef": {
      "Value": {
        "Ref": "vpcStack"
      }
    },
    "SecurityGroups": {
      "Value": {
        "Fn::GetAtt": ["vpcStack", "Outputs.SecurityGroups"]
      }
    },

    "VpcId": {
      "Value": {
        "Fn::GetAtt": ["vpcStack", "Outputs.VpcId"]
      }
    },

    "SubnetIds": {
      "Value": {
        "Fn::GetAtt": ["vpcStack", "Outputs.SubnetIds"]
      }
    }
  }
}